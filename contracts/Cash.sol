// (c) Kallol Borah, 2020
// Implementation of the Via cash token.

pragma solidity >=0.5.0 <0.7.0;

import "./erc/ERC20.sol";
import "./oraclize/ViaRate.sol";
import "./oraclize/EthToUSD.sol";
import "./utilities/StringUtils.sol";
import "@openzeppelin/upgrades/contracts/Initializable.sol";
import "@openzeppelin/contracts/ownership/Ownable.sol";
import "./utilities/Strings.sol";

contract Cash is ERC20, Initializable, Ownable {

    using strings for *;
    using stringutils for *;

    //via token factory address
    address producer;

    //name of Via token (eg, Via-USD)
    bytes32 public name;
    bytes32 public symbol;

    uint256 via;
    uint256 value;

    struct cash{
        bytes32 name;
        uint256 balance;
    }

    //cash balances held by this issuer against which via cash tokens are issued
    mapping(address => cash[]) private cashbalances;

    struct depositor{
        address name;
        bytes32 currency;
    }

    //list of depositors via is issued to
    mapping(address => depositor[]) private depositors;

    //events to capture and report to Via oracle
    event ViaCashIssued(bytes32 currency, uint256 value);
    event ViaCashRedeemed(bytes32 currency, uint256 value);

    //initiliaze proxies
    function initialize(bytes32 _name, address _owner) public {
        Ownable.initialize(_owner);
        producer = _owner;
        name = _name;
        symbol = _name;
    }

    //handling pay in of ether for issue of via cash tokens
    function() payable public {
        //ether paid in
        require(msg.value !=0);
        //issue via cash tokens
        issue(msg.value, msg.sender, "ether");
    }

    //overriding this function of ERC20 standard
    function transferFrom(address sender, address receiver, uint256 tokens) public returns (bool){
        //owner should have more tokens than being transferred
        require(tokens <= balances[sender]);
        //sending contract should be allowed by token owner to make this transfer
        require(tokens <= allowed[sender][msg.sender]);
        //check if tokens are being transferred to this cash contract
        if(receiver == address(this)){ 
            //if token name is the same, this transfer has to be redeemed
            if(address(msg.sender).name()==name){ 
                if(redeem(tokens, receiver))
                    return true;
                else
                    return false;
            }
            //else request issue of cash tokens generated by this contract
            else{
                //only issue if cash tokens are paid in, since bond tokens can't be paid to issue bond token
                for(uint256 p=0; p<owner.tokens.length; p++){
                    if(owner.tokens[p].name == address(msg.sender).name() &&
                        owner.tokens[p].tokenType != "ViaBond"){
                        issue(tokens, receiver, address(msg.sender).name());
                        return true;
                    }
                }
                return false;
            }
        } 
        else { 
            //tokens are being sent to a user account
            balances[sender] = balances[sender].sub(tokens);
            allowed[sender][msg.sender] = allowed[sender][msg.sender].sub(tokens);
            balances[receiver] = balances[receiver].add(tokens);
            emit Transfer(sender, receiver, tokens);
            return true;
        }                
    }
    
    //requesting issue of Via to buyer for amount of ether or some other via cash token
    function issue(uint256 amount, address buyer, bytes32 currency) private {
        //ensure that brought amount is not zero
        require(amount != 0);
        bool found = false;
        uint256 p=0;
        //adds paid in currency to this contract's cash balance
        for(p=0; p<cashbalances[address(this)].length; p++){
            if(cashbalances[address(this)][p].name == currency){
                cashbalances[address(this)][p].amount += amount;
                found = true;
            }
        }
        if(!found){
            cashbalances[address(this)][p].name = currency;
            cashbalances[address(this)][p].amount = amount;
        }
        found = false;
        //add depositor to list of depositors
        for(p=0; p<depositors[address(this)].length; p++){
            if(depositors[address(this)][p].name == buyer &&
                depositors[address(this)][p].currency == currency){
                found = true;
            }
        }
        if(!found){
            depositors[address(this)][p].name = buyer;
            depositors[address(this)][p].currency = currency;
        }
        //find amount of via cash tokens to transfer after applying exchange rate
        via = convertToVia(amount, currency);
        //add via to this contract's balance first (aka issue them first)
        balances[address(this)].add(via);
        //transfer amount to buyer 
        transfer(buyer, via);
        //adjust total supply
        totalSupply_ += via;
        //generate event
        emit ViaCashIssued(name, amount);
    }

    //requesting redemption of Via cash token and transfer of currency it was issued against
    function redeem(uint256 amount, address seller) private returns(bool){
        //ensure that sold amount is not zero
        require(amount != 0);
        //find currency that seller had deposited earlier
        bool found = false;
        bytes32 currency;
        for(uint256 p=0; p<depositors[address(this)].length; p++){
            if(depositors[address(this)][p].name == seller){
                currency = depositors[address(this)][p].currency;
                found = true;
            }
        }
        if(found){
            found = false;
            value = convertFromVia(amount, currency);
            //only if the issuer's balance of the deposited currency is more than or equal to amount redeemed
            for(uint256 p=0; p<cashbalances[address(this)].length; p++){
                //check if currency in which redemption is to be done is available in cash balances
                if(cashbalances[address(this)][p].name == currency){
                    //check if currency in which redemption is to be done has sufficient balance
                    if(cashbalances[address(this)][p].balance > value){
                        found = true;
                        //deduct amount to be transferred from cash balance
                        cashbalances[address(this)][p].balance -= value;
                        //transfer amount from issuer/sender to seller 
                        transfer(seller, value);
                        //adjust total supply
                        totalSupply_ -= amount;
                        //generate event
                        emit ViaCashRedeemed(currency, amount);
                        return true;
                    }
                }
            }
            if(!found)
                return false;
        }
        return false;
    }
    
    //get Via exchange rates from oracle and convert given currency and amount to via cash token
    function convertToVia(uint256 amount, bytes32 currency) private returns(uint256){
        if(currency=="ether"){
            //to first convert amount of ether passed to this function to USD
            uint256 amountInUSD = (amount/1000000000000000000)*uint256(new EthToUSD().stringToUint());
            //to then convert USD to Via-currency if currency of this contract is not USD itself 
            if(name!="Via-USD"){
                uint256 inVia = amountInUSD * uint256(new ViaRate("Via_USD_to_".toSlice().concat(name.toSlice()),"er").stringToUint());
                return inVia;
            }
            else{
                return amountInUSD;
            }
        }
        //if currency paid in another via currency
        else{
            uint256 inVia = uint256(new ViaRate(currency.toSlice().concat("_to_".toSlice().concat(name.toSlice())),"er").stringToUint());
            return inVia;
        }
    }

    //convert Via-currency (eg, Via-EUR, Via-INR, Via-USD) to Ether or another Via currency
    function convertFromVia(uint256 amount, bytes32 currency) private returns(uint256){
        //if currency to convert from is ether
        if(currency=="ether"){
            uint256 amountInViaUSD = amount * uint256(new ViaRate(name.toSlice().concat("_to_Via_USD".toSlice()),"er").stringToUint());
            uint256 inEth = amountInViaUSD * (1/uint256(new EthToUSD().stringToUint()));
            return inEth;
        }
        //else convert to another via currency
        else{
            return(uint256(new ViaRate(name.toSlice().concat("_to_".toSlice().concat(currency.toSlice())),"er").stringToUint())*amount);
        }
    }

}
